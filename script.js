
const LS = { get(k, d){ try{ return JSON.parse(localStorage.getItem(k)) ?? d; } catch{ return d; } }, set(k, v){ localStorage.setItem(k, JSON.stringify(v)); } };
let tasks = []; let archive = []; let overdueIds = []; let dayPlan = []; let dayPlanLocked = false; let lastPlanDate = null; let notes = []; let user = LS.get('userSimple', { loggedIn:false, name:'', email:'' });
let progMenuId = null;
document.addEventListener('DOMContentLoaded', () => {
  tasks = LS.get('tasks', []); archive = LS.get('archive', []); overdueIds = LS.get('overdueIds', []); dayPlan = LS.get('dayPlan', []); dayPlanLocked = LS.get('dayPlanLocked', false); lastPlanDate = LS.get('lastPlanDate', null); notes = LS.get('notes', []);
  dailyResetIfNeeded(); wireTopbar(); wireAuthSimple(); markActiveNav();
  const page = document.body.getAttribute('data-page');
  switch(page){
    case 'dashboard': setupDayPlanDropZone(); qs('#confirmPlanBtn').addEventListener('click', confirmDayPlan); qs('#unlockPlanBtn').addEventListener('click', unlockDayPlan); renderDashboard(); break;
    case 'alle': renderTasksView(); break;
    case 'add': qs('#addForm').addEventListener('submit', onAddTask); break;
    case 'cal': qs('#calPrev').addEventListener('click', ()=>{ shiftMonth(-1); renderCalendar(); }); qs('#calNext').addEventListener('click', ()=>{ shiftMonth(1); renderCalendar(); }); renderCalendar(); break;
    case 'overdue': renderOverdue(); break;
    case 'archive': renderArchive(); break;
    case 'notes': qs('#noteForm').addEventListener('submit', onAddNote); renderNotes(); break;
    case 'monitor': renderMonitoring(); break;
    case 'profile': qs('#profileForm').addEventListener('submit', onSaveProfile); break;
  }
  startClock();
});
function qs(s){ return document.querySelector(s); } function qsa(s){ return Array.from(document.querySelectorAll(s)); }
function esc(s){ return (s||'').replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }
function two(n){ return String(n).padStart(2,'0'); } function gotoPage(h){ window.location.href = h; }
function wireTopbar(){ const btn=qs('#userBtn'); if(btn){ btn.addEventListener('click', ()=> qs('#userDropdown').classList.toggle('hidden')); document.addEventListener('click', e=>{ if(!e.target.closest('.user-menu')) qs('#userDropdown')?.classList.add('hidden'); }); } applyUserToUI(); }
function applyUserToUI(){ const initials=(user.name||'U').split(/\s+/).map(s=>s[0]?.toUpperCase()).slice(0,2).join('')||'U'; qs('#avatarInitials')?.textContent=initials; qs('#ddName')?.textContent=user.name||'Gebruiker'; qs('#ddEmail')?.textContent=user.email||''; }
function wireAuthSimple(){ const overlay=qs('#authOverlay'), form=qs('#loginForm'); if(!overlay||!form) return; form.addEventListener('submit', (e)=>{ e.preventDefault(); const u=qs('#loginUser').value.trim(), p=qs('#loginPass').value; if(u==='admin' && p==='1234'){ user={ loggedIn:true, name:'Admin', email:'' }; LS.set('userSimple', user); applyUserToUI(); overlay.classList.add('hidden'); } else { alert('Onjuist. Probeer admin / 1234'); } }); if(!user.loggedIn){ overlay.classList.remove('hidden'); } }
function lockApp(){ user={ loggedIn:false, name:'', email:'' }; LS.set('userSimple', user); qs('#authOverlay')?.classList.remove('hidden'); }
function updateClock(){ const el=qs('#clock'); if(!el) return; const now=new Date(); const dateStr=`${two(now.getDate())}-${two(now.getMonth()+1)}-${now.getFullYear()}`; const timeStr=`${two(now.getHours())}:${two(now.getMinutes())}:${two(now.getSeconds())}`; el.textContent=`${dateStr} ${timeStr}`; } function startClock(){ updateClock(); setInterval(updateClock, 1000); }
function todayISO(){ return new Date().toISOString().slice(0,10); }
function dailyResetIfNeeded(){ const last=LS.get('lastPlanDate', null); const today=todayISO(); if(last && last!==today){ const unfinished=dayPlan.filter(id => { const t=tasks.find(x=>x.id===id); return t && !t.done; }); overdueIds=[...new Set([*overdueIds, *unfinished])]; dayPlan=[]; dayPlanLocked=false; LS.set('overdueIds', overdueIds); LS.set('dayPlan', dayPlan); LS.set('dayPlanLocked', dayPlanLocked); } LS.set('lastPlanDate', today); }
function markActiveNav(){ const page=document.body.getAttribute('data-page'); qsa('.nav a').forEach(a => a.classList.toggle('active', a.getAttribute('data-page')===page)); }
function rid(){ return (crypto.getRandomValues(new Uint32Array(4))).join('-'); } function clamp(n,min,max){ return Math.max(min, Math.min(max, n)); }
function fmtDate(iso){ if(!iso) return ''; const y=iso.slice(0,4), m=iso.slice(5,7), d=iso.slice(8,10); return `${d}-${m}-${y}`; }
function fmtDateTime(iso){ if(!iso) return ''; const d=new Date(iso); const dd=two(d.getDate()), mm=two(d.getMonth()+1), yy=d.getFullYear(); const hh=two(d.getHours()), mi=two(d.getMinutes()); return `${dd}-${mm}-${yy} ${hh}:${mi}`; }
function endOfDay(iso){ return new Date(iso+'T23:59:59'); }
function typeColor(type){ switch((type||'').toLowerCase()){ case 'mail':return '#3b82f6'; case 'telefoontje':return '#9333ea'; case 'uitzoekwerk':return '#4f46e5'; case 'overleg':return '#06b6d4'; case 'documentatie':return '#64748b'; case 'creatief':return '#ec4899'; case 'administratie':return '#f97316'; default:return '#94a3b8'; } }
function getOpenTasks(){ return tasks.filter(t=>!t.done); }
function getUrgency(t){ if(t.urgencyOverride) return t.urgencyOverride; const days=(new Date(t.deadline)-new Date())/86400000; if(days<=1) return 'urgent'; if(days<=3) return 'warning'; return 'safe'; }
function urgLabel(u){ return u==='urgent'?'Rood' : u==='warning'?'Geel' : 'Groen'; }
function sortByUrgencyDeadline(a,b){ const ua=(getUrgency(a)==='urgent'?0 : getUrgency(a)==='warning'?1:2); const ub=(getUrgency(b)==='urgent'?0 : getUrgency(b)==='warning'?1:2); if(ua!==ub) return ua-ub; return new Date(a.deadline)-new Date(b.deadline); }
function persistAll(){ LS.set('tasks', tasks); LS.set('archive', archive); LS.set('overdueIds', overdueIds); LS.set('dayPlan', dayPlan); LS.set('dayPlanLocked', dayPlanLocked); }
function progressBarFor(t){ const pct=Math.max(0, Math.min(100, t.progress||0)); const urg=getUrgency(t); const color=typeColor(t.type); return `<div class="progress ${urg}" style="--type-color:${color}"><span style="width:${pct}%"></span></div>`; }
function ensureProgMenu(){ let menu=qs('#progMenu'); if(!menu){ menu=document.createElement('div'); menu.id='progMenu'; menu.className='prog-menu hidden'; menu.innerHTML=`<button data-v="0">0%</button><button data-v="25">25%</button><button data-v="50">50%</button><button data-v="75">75%</button><button data-v="100">100%</button>`; document.body.appendChild(menu); menu.addEventListener('click', (e)=>{ const btn=e.target.closest('button'); if(!btn) return; const v=parseInt(btn.getAttribute('data-v'),10); const t=tasks.find(x=>x.id===progMenuId)||archive.find(x=>x.id===progMenuId); if(!t) return closeProgMenu(); t.progress=v; LS.set('tasks', tasks); closeProgMenu(); rerenderCurrentPage(); }); document.addEventListener('click', (e)=>{ if(e.target.closest('.prog-menu')||e.target.closest('.prog-chip')) return; closeProgMenu(); }); } return menu; }
function openProgMenu(ev, id){ progMenuId=id; const menu=ensureProgMenu(); const x=ev.clientX, y=ev.clientY; menu.style.left=Math.max(6,x-10)+'px'; menu.style.top=(y+10)+'px'; menu.classList.remove('hidden'); }
function closeProgMenu(){ qs('#progMenu')?.classList.add('hidden'); progMenuId=null; }
function renderDashboard(){ renderUrgentIndicators(); renderDayPlan(); renderSuggestions(); renderTypeOverview(); }
function renderUrgentIndicators(){ const urgCount=getOpenTasks().filter(t=>getUrgency(t)==='urgent').length; const chip=qs('#urgCountCard'); const wrap=qs('#urgentChipCard'); if(chip) chip.textContent=urgCount; if(wrap) wrap.classList.toggle('hidden', urgCount===0); }
function renderDayPlan(){ const list=qs('#dayPlanList'); const checklist=qs('#dayChecklist'); const info=qs('#planInfo'); const planned=dayPlan.map(id=>tasks.find(t=>t.id===id)).filter(Boolean); if(dayPlanLocked){ qs('#unlockPlanBtn').classList.remove('hidden'); list.classList.add('hidden'); checklist.classList.remove('hidden'); info.textContent='Dagplanning bevestigd — werk de taken hieronder af.'; checklist.innerHTML=''; planned.forEach(t=>{ const row=document.createElement('div'); row.className='item'; row.innerHTML=`<div class="item-main"><input type="checkbox" ${t.done?'checked':''} onchange="toggleDone('${t.id}', this.checked)" /><div class="title">${esc(t.title)}</div><div class="meta"><i class="fa-regular fa-calendar"></i> ${fmtDate(t.deadline)} <span class="badge ${getUrgency(t)}">${urgLabel(getUrgency(t))}</span></div></div><div class="progress-wrap">${progressBarFor(t)}<button class="prog-chip" onclick="openProgMenu(event,'${t.id}')">${t.progress||0}% ▾</button></div>`; checklist.appendChild(row); }); } else { qs('#unlockPlanBtn').classList.add('hidden'); list.classList.remove('hidden'); checklist.classList.add('hidden'); info.textContent='Sleep taken (desktop) of gebruik de knop “Plan”.'; list.innerHTML=''; planned.forEach(t=> list.appendChild(taskRow(t,{draggable:true,inPlan:true}))); } }
function renderSuggestions(){ const ul=qs('#suggestList'); if(!ul) return; ul.innerHTML=''; let suggestions=getOpenTasks().filter(t=>!dayPlan.includes(t.id)).sort(sortByUrgencyDeadline); const max=LS.get('prefsDailyGoal', 5); suggestions=suggestions.slice(0, Math.max(5, max)); suggestions.forEach(t=> ul.appendChild(taskRow(t,{draggable:true}))); }
function renderTypeOverview(){ const wrap=qs('#typeOverview'); if(!wrap) return; wrap.innerHTML=''; const groups=new Map(); getOpenTasks().forEach(t=>{ const key=(t.type||'overig').toLowerCase(); if(!groups.has(key)) groups.set(key, []); groups.get(key).push(t); }); const order=['mail','telefoontje','uitzoekwerk','overleg','documentatie','creatief','administratie','overig']; const keys=Array.from(groups.keys()).sort((a,b)=> order.indexOf(a)-order.indexOf(b)); keys.forEach(key=>{ const arr=groups.get(key).sort(sortByUrgencyDeadline); const acc=document.createElement('div'); acc.className='acc'; const header=document.createElement('div'); header.className='acc-header'; header.innerHTML=`<div class="left"><i class="fa-solid fa-tag"></i> ${cap(key)}</div><div class="count">${arr.length}</div>`; const body=document.createElement('div'); body.className='acc-body'; const ul=document.createElement('ul'); ul.className='list'; arr.forEach(t=> ul.appendChild(taskRow(t,{draggable:true}))); body.appendChild(ul); header.addEventListener('click', ()=> acc.classList.toggle('open')); acc.appendChild(header); acc.appendChild(body); wrap.appendChild(acc); }); }
function renderTasksView(){ const catSel=qs('#filterCategory'); const ul=qs('#taskList'); if(!ul) return; const cats=[...new Set(tasks.filter(t=>t.category).map(t=>t.category))].sort(); if(catSel) catSel.innerHTML='<option value=\"\">Alle categorieën</option>'+cats.map(c=>`<option>${esc(c)}</option>`).join(''); let list=getOpenTasks(); const fc=catSel?.value||''; const ft=qs('#filterType')?.value||''; const fu=qs('#filterUrgency')?.value||''; if(fc) list=list.filter(t=>t.category===fc); if(ft) list=list.filter(t=>t.type===ft); if(fu) list=list.filter(t=>getUrgency(t)===fu); ul.innerHTML=''; list.sort(sortByUrgencyDeadline).forEach(t=> ul.appendChild(taskRow(t,{draggable:true}))); }
function renderOverdue(){ const ul=qs('#overdueList'); if(!ul) return; ul.innerHTML=''; overdueIds.map(id=> tasks.find(t=>t && t.id===id)).filter(Boolean).sort(sortByUrgencyDeadline).forEach(t=> ul.appendChild(taskRow(t,{draggable:false, overdueBadge:true}))); }
function renderArchive(){ const ul=qs('#archiveList'); if(!ul) return; ul.innerHTML=''; archive.slice().reverse().forEach(t=>{ const li=document.createElement('li'); li.className='item'; li.innerHTML=`<div class="item-main"><div class="title">${esc(t.title)}</div><div class="meta"><i class="fa-regular fa-calendar"></i> ${fmtDate(t.deadline)} • afgerond ${fmtDateTime(t.completedAt)}</div></div><div class="badge">Voortgang ${t.progress||0}%</div>`; ul.appendChild(li); }); }
let calYear=(new Date()).getFullYear(); let calMonth=(new Date()).getMonth(); function shiftMonth(delta){ calMonth+=delta; if(calMonth<0){ calMonth=11; calYear--; } if(calMonth>11){ calMonth=0; calYear++; } }
function renderCalendar(){ const title=qs('#calTitle'); const grid=qs('#calendarGrid'); if(!title||!grid) return; const monthNames=['januari','februari','maart','april','mei','juni','juli','augustus','september','oktober','november','december']; title.textContent=`${monthNames[calMonth]} ${calYear}`; grid.innerHTML=''; ['Ma','Di','Wo','Do','Vr','Za','Zo'].forEach(d=>{ const h=document.createElement('div'); h.className='cal-head'; h.textContent=d; grid.appendChild(h); }); const first=new Date(calYear, calMonth, 1); const last=new Date(calYear, calMonth+1, 0); const startOffset=(first.getDay()+6)%7; for(let i=0;i<startOffset;i++){ grid.appendChild(emptyCell()); } for(let d=1; d<=last.getDate(); d++){ const dateISO=new Date(calYear, calMonth, d).toISOString().slice(0,10); const cell=document.createElement('div'); cell.className='cell'; cell.innerHTML=`<div class="day">${String(d).padStart(2,'0')}</div>`; getOpenTasks().filter(t=>t.deadline===dateISO).sort(sortByUrgencyDeadline).forEach(t=>{ const div=document.createElement('div'); div.className=`small ${getUrgency(t)}`; div.textContent=t.title; div.addEventListener('click', ()=>openDetail(t.id)); cell.appendChild(div); }); grid.appendChild(cell); } }
function emptyCell(){ const c=document.createElement('div'); c.className='cell'; return c; }
function onAddNote(e){ e.preventDefault(); const title=qs('#noteTitle').value.trim(); const category=qs('#noteCategory').value.trim(); const text=qs('#noteText').value.trim(); if(!title && !text) return; notes.push({ id:rid(), title, category, text, createdAt:new Date().toISOString() }); LS.set('notes', notes); e.target.reset(); renderNotes(); }
function renderNotes(){ const ul=qs('#noteList'); if(!ul) return; ul.innerHTML=''; notes.forEach(n=>{ const li=document.createElement('li'); li.className='item'; li.innerHTML=`<div class="item-main"><div class="title">${esc(n.title||'(zonder titel)')}</div></div><div class="meta">${n.category?`<span class="badge">${esc(n.category)}</span>`:''}<button class="btn" onclick="noteToTask('${n.id}')"><i class="fa-solid fa-plus"></i> Maak taak</button><button class="icon-btn" onclick="deleteNote('${n.id}')" title="Verwijder"><i class="fa-solid fa-trash"></i></button></div>`; ul.appendChild(li); }); }
function noteToTask(id){ const n=notes.find(x=>x.id===id); if(!n) return; window.location.href='nieuwe-taak.html'; localStorage.setItem('prefillTitle', JSON.stringify(n.title || (n.text||'').slice(0,60))); localStorage.setItem('prefillCategory', JSON.stringify(n.category || '')); }
function deleteNote(id){ notes=notes.filter(n=>n.id!==id); LS.set('notes', notes); renderNotes(); }
function onAddTask(e){ e.preventDefault(); const title=qs('#addTitle').value.trim(); const deadline=qs('#addDeadline').value; if(!title||!deadline){ alert('Vul minimaal titel en deadline in.'); return; } const urgency=qs('#addUrgency').value; const type=qs('#addType').value; const category=qs('#addCategory').value.trim(); const duration=qs('#addDuration').value; const progress=clamp(parseInt(qs('#addProgress').value||'0',10),0,100); const description=qs('#addDesc').value.trim(); const t={ id:rid(), title, description, deadline, urgencyOverride:urgency||'', type, category, duration, progress, createdAt:new Date().toISOString(), plannedDay:null, done:false, completedAt:null }; tasks.push(t); persistAll(); e.target.reset(); localStorage.removeItem('prefillTitle'); localStorage.removeItem('prefillCategory'); window.location.href='index.html'; }
document.addEventListener('DOMContentLoaded', ()=>{ const t=localStorage.getItem('prefillTitle'); const c=localStorage.getItem('prefillCategory'); if(t&&qs('#addTitle')) qs('#addTitle').value=JSON.parse(t); if(c&&qs('#addCategory')) qs('#addCategory').value=JSON.parse(c); });
function taskRow(t,{draggable=false,inPlan=false,overdueBadge=false}={}){ const li=document.createElement('li'); li.className='item'; li.dataset.id=t.id; const actionBtn=inPlan?`<button class="btn" onclick="removeFromDayPlan('${t.id}')" title="Uit dagplanning"><i class="fa-solid fa-minus"></i> Verwijder</button>`:`<button class="btn" onclick="addToDayPlan('${t.id}')" title="Plan vandaag"><i class="fa-solid fa-calendar-plus"></i> Plan</button>`; li.innerHTML=`<div class="item-main"><button class="icon-btn" title="Details" onclick="openDetail('${t.id}')"><i class="fa-regular fa-pen-to-square"></i></button><div class="title">${esc(t.title)}</div><div class="meta"><i class="fa-regular fa-calendar"></i> ${fmtDate(t.deadline)}<span class="badge ${getUrgency(t)}">${urgLabel(getUrgency(t))}</span>${t.category?`<span class="badge"><i class="fa-solid fa-tag"></i> ${esc(t.category)}</span>`:''}${t.type?`<span class="badge"><i class="fa-solid fa-list"></i> ${esc(t.type)}</span>`:''}${overdueBadge?'<span class="badge urgent">Achterstallig</span>':''}</div></div><div class="progress-wrap">${progressBarFor(t)}<button class="prog-chip" onclick="openProgMenu(event,'${t.id}')">${t.progress||0}% ▾</button>${actionBtn}</div>`; if(draggable){ li.draggable=true; li.addEventListener('dragstart', (e)=>{ try{ e.dataTransfer.setData('text/plain', t.id); e.dataTransfer.effectAllowed='move'; }catch(_){}}); } return li; }
function setupDayPlanDropZone(){ const zone=qs('#dayPlanList'); if(!zone) return; zone.addEventListener('dragenter',(e)=>{ e.preventDefault(); zone.classList.add('drag-over'); }); zone.addEventListener('dragover',(e)=>{ e.preventDefault(); zone.classList.add('drag-over'); }); zone.addEventListener('dragleave',()=> zone.classList.remove('drag-over')); zone.addEventListener('drop',(e)=>{ e.preventDefault(); zone.classList.remove('drag-over'); if(dayPlanLocked){ alert('Dagplanning is bevestigd. Ontgrendel om te wijzigen.'); return; } let id=''; try{ id=e.dataTransfer.getData('text/plain'); }catch(_){ } if(!id) return; const index=dropIndexByY(zone, e.clientY); const from=dayPlan.indexOf(id); if(from>-1) dayPlan.splice(from,1); const at=Math.max(0, Math.min(index, dayPlan.length)); dayPlan.splice(at, 0, id); LS.set('dayPlan', dayPlan); rerenderCurrentPage(); }); }
function dropIndexByY(container,y){ const kids=Array.from(container.children); for(let i=0;i<kids.length;i++){ const rect=kids[i].getBoundingClientRect(); const mid=rect.top+rect.height/2; if(y<mid) return i; } return kids.length; }
function addToDayPlan(id){ if(dayPlanLocked){ alert('Dagplanning is bevestigd. Ontgrendel om te wijzigen.'); return; } if(!dayPlan.includes(id)) dayPlan.push(id); LS.set('dayPlan', dayPlan); rerenderCurrentPage(); }
function removeFromDayPlan(id){ if(dayPlanLocked){ alert('Dagplanning is bevestigd. Ontgrendel om te wijzigen.'); return; } dayPlan=dayPlan.filter(x=>x!==id); LS.set('dayPlan', dayPlan); rerenderCurrentPage(); }
function openDetail(id){ alert('Detailbewerking volgt (basisversie).'); }
function toggleDone(id, checked){ const t=tasks.find(x=>x.id===id); if(!t) return; t.done=!!checked; if(checked){ t.completedAt=new Date().toISOString(); archive.push(t); tasks=tasks.filter(x=>x.id!==id); dayPlan=dayPlan.filter(x=>x!==id); } persistAll(); rerenderCurrentPage(); }
function confirmDayPlan(){ dayPlanLocked=true; const today=todayISO(); dayPlan.forEach(id=>{ const t=tasks.find(x=>x.id===id); if(t) t.plannedDay=today; }); persistAll(); rerenderCurrentPage(); }
function unlockDayPlan(){ dayPlanLocked=false; persistAll(); rerenderCurrentPage(); }
function renderMonitoring(){ qs('#statOpen').textContent=getOpenTasks().length.toString(); qs('#statOverdue').textContent=overdueIds.length.toString(); const goal=LS.get('prefsDailyGoal',5); qs('#statPlannedToday').textContent=`${dayPlan.length}/${goal}`; const plannedTasks=dayPlan.map(id => tasks.find(t=>t.id===id) || archive.find(t=>t.id===id)).filter(Boolean); const doneInPlan=plannedTasks.filter(t => t.done || archive.some(a=>a.id===t.id)).length; qs('#statPlanDone').textContent=plannedTasks.length ? Math.round(doneInPlan*100/plannedTasks.length)+'%' : '0%'; const open=getOpenTasks(); const avgProg=open.length? Math.round(open.reduce((s,t)=>s+(t.progress||0),0)/open.length):0; qs('#statAvgProgress').textContent=avgProg+'%'; const weekCount=archive.filter(t => { const d=(t.completedAt||'').slice(0,10); if(!d) return false; const dt=new Date(d); const now=new Date(); const diff=(now-dt)/86400000; return diff<=7; }).length; qs('#statWeekCompleted').textContent=weekCount.toString(); const withDeadline=archive.filter(t=>t.deadline); const onTime=withDeadline.filter(t => new Date(t.completedAt) <= endOfDay(t.deadline)); const pct=withDeadline.length? Math.round(onTime.length*100/withDeadline.length):0; qs('#statOnTime').textContent=pct+'%'; const durations=archive.filter(t=>t.completedAt && t.createdAt).map(t => (new Date(t.completedAt)-new Date(t.createdAt))/36e5); const avg=durations.length? (durations.reduce((a,b)=>a+b,0)/durations.length).toFixed(1):'–'; qs('#statAvgDur').textContent=avg==='–'?'–':(avg+' u'); }
function rerenderCurrentPage(){ const page=document.body.getAttribute('data-page'); switch(page){ case 'dashboard': renderDashboard(); break; case 'alle': renderTasksView(); break; case 'overdue': renderOverdue(); break; case 'archive': renderArchive(); break; case 'cal': renderCalendar(); break; case 'monitor': renderMonitoring(); break; case 'notes': renderNotes(); break; } }
function cap(s){ return (s||'').charAt(0).toUpperCase() + (s||'').slice(1); }
